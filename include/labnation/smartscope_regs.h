#ifndef _LABNATION_SMARTSCOPE_REGS_H
#define _LABNATION_SMARTSCOPE_REGS_H

#include <map>
#include <vector>
#include "memory/register.h"

namespace labnation {

const int HDR_OFFSET = 15;
const int SZ_HDR = 64;
const int PACKAGE_MAX = 64;
const int SZ_OVERVIEW = 2048 * 2;
const int ACQUISITION_DEPTH_MIN = 128; //Size of RAM
const int ACQUISITION_DEPTH_MAX = 4 * 1024 * 1024; //Size of RAM
const int FETCH_SIZE_MAX = 2048 * 2;

#define LIST_PIC \
  X(FORCE_STREAMING, 0)

#define LIST_REG \
  X(STROBE_UPDATE, 0) \
  X(SPI_ADDRESS, 1) \
  X(SPI_WRITE_VALUE, 2) \
  X(DIVIDER_MULTIPLIER, 3) \
  X(CHA_YOFFSET_VOLTAGE, 4) \
  X(CHB_YOFFSET_VOLTAGE, 5) \
  X(TRIGGER_PWM, 6) \
  X(TRIGGER_LEVEL, 7) \
  X(TRIGGER_MODE, 8) \
  X(TRIGGER_PW_MIN_B0, 9) \
  X(TRIGGER_PW_MIN_B1, 10) \
  X(TRIGGER_PW_MIN_B2, 11) \
  X(TRIGGER_PW_MAX_B0, 12) \
  X(TRIGGER_PW_MAX_B1, 13) \
  X(TRIGGER_PW_MAX_B2, 14) \
  X(INPUT_DECIMATION, 15) \
  X(ACQUISITION_DEPTH, 16) \
  X(TRIGGERHOLDOFF_B0, 17) \
  X(TRIGGERHOLDOFF_B1, 18) \
  X(TRIGGERHOLDOFF_B2, 19) \
  X(TRIGGERHOLDOFF_B3, 20) \
  X(VIEW_DECIMATION, 21) \
  X(VIEW_OFFSET_B0, 22) \
  X(VIEW_OFFSET_B1, 23) \
  X(VIEW_OFFSET_B2, 24) \
  X(VIEW_ACQUISITIONS, 25) \
  X(VIEW_BURSTS, 26) \
  X(VIEW_EXCESS_B0, 27) \
  X(VIEW_EXCESS_B1, 28) \
  X(DIGITAL_TRIGGER_RISING, 29) \
  X(DIGITAL_TRIGGER_FALLING, 30) \
  X(DIGITAL_TRIGGER_HIGH, 31) \
  X(DIGITAL_TRIGGER_LOW, 32) \
  X(DIGITAL_OUT, 33) \
  X(GENERATOR_DECIMATION_B0, 34) \
  X(GENERATOR_DECIMATION_B1, 35) \
  X(GENERATOR_DECIMATION_B2, 36) \
  X(GENERATOR_SAMPLES_B0, 37) \
  X(GENERATOR_SAMPLES_B1, 38)

#define LIST_STR \
  X(GLOBAL_RESET, 0) \
  X(INIT_SPI_TRANSFER, 1) \
  X(GENERATOR_TO_AWG, 2) \
  X(LA_ENABLE, 3) \
  X(SCOPE_ENABLE, 4) \
  X(SCOPE_UPDATE, 5) \
  X(FORCE_TRIGGER, 6) \
  X(VIEW_UPDATE, 7) \
  X(VIEW_SEND_OVERVIEW, 8) \
  X(VIEW_SEND_PARTIAL, 9) \
  X(ACQ_START, 10) \
  X(ACQ_STOP, 11) \
  X(CHA_DCCOUPLING, 12) \
  X(CHB_DCCOUPLING, 13) \
  X(ENABLE_ADC, 14) \
  X(ENABLE_NEG, 15) \
  X(ENABLE_RAM, 16) \
  X(DOUT_3V_5V, 17) \
  X(EN_OPAMP_B, 18) \
  X(GENERATOR_TO_DIGITAL, 19) \
  X(ROLL, 20) \
  X(LA_CHANNEL, 21) \
  X(LAST, 21) \

#define LIST_ROM \
  X(FW_GIT0, 0) \
  X(FW_GIT1, 1) \
  X(FW_GIT2, 2) \
  X(FW_GIT3, 3) \
  X(SPI_RECEIVED_VALUE, 4) \
  X(STROBES, 5)

#define LIST_ADC \
  X(POWER_MANAGEMENT, 0) \
  X(OUTPUT_FORMAT, 1) \
  X(OUTPUT_PWR_MNGMNT, 2) \
  X(DATA_CLK_TIMING, 3) \
  X(CHA_TERMINATION, 4) \
  X(CHB_TERMINATION, 5) \
  X(FORMAT_PATTERN, 6) \
  X(COMMON_MODE, 8) \
  X(SOFT_RESET, 10)

#define X(name, value) REG_##name = value,
enum REG { LIST_REG };
#undef X
#define X(name, value) STR_##name = value,
enum STR { LIST_STR };
#undef X
#define X(name, value) ROM_##name = value,
enum ROM { LIST_ROM };
#undef X
#define X(name, value) ADC_##name = value,
enum ADC { LIST_ADC };
#undef X

static std::map<REG, int> HDR_REGS
{
  { REG_TRIGGER_LEVEL, 0 },
  { REG_TRIGGER_MODE, 1 },
  { REG_TRIGGERHOLDOFF_B0, 2 },
  { REG_TRIGGERHOLDOFF_B1, 3 },
  { REG_TRIGGERHOLDOFF_B2, 4 },
  { REG_TRIGGERHOLDOFF_B3, 5 },
  { REG_CHA_YOFFSET_VOLTAGE, 6 },
  { REG_CHB_YOFFSET_VOLTAGE, 7 },
  { REG_DIVIDER_MULTIPLIER, 8 },
  { REG_INPUT_DECIMATION, 9 },
  { REG_TRIGGER_PW_MIN_B0, 10 },
  { REG_TRIGGER_PW_MIN_B1, 11 },
  { REG_TRIGGER_PW_MIN_B2, 12 },
  { REG_TRIGGER_PW_MAX_B0, 13 },
  { REG_TRIGGER_PW_MAX_B1, 14 },
  { REG_TRIGGER_PW_MAX_B2, 15 },
  { REG_TRIGGER_PWM, 16 },
  { REG_DIGITAL_TRIGGER_RISING, 17 },
  { REG_DIGITAL_TRIGGER_FALLING, 18 },
  { REG_DIGITAL_TRIGGER_HIGH, 19 },
  { REG_DIGITAL_TRIGGER_LOW, 20 },
  { REG_ACQUISITION_DEPTH, 21 },
  { REG_VIEW_DECIMATION, 22 },
  { REG_VIEW_OFFSET_B0, 23 },
  { REG_VIEW_OFFSET_B1, 24 },
  { REG_VIEW_OFFSET_B2, 25 },
  { REG_VIEW_ACQUISITIONS, 26 },
  { REG_VIEW_BURSTS, 27 },
  { REG_VIEW_EXCESS_B0, 28 },
  { REG_VIEW_EXCESS_B1, 29 },
};
const int N_HDR_REGS = 30;


static std::map<STR, int> HDR_STROBES =
{
  { STR_LA_ENABLE, 0 },
  { STR_CHA_DCCOUPLING, 1 },
  { STR_CHB_DCCOUPLING, 2 },
  { STR_ROLL, 3 },
  { STR_LA_CHANNEL, 4 },
};
const int N_HDR_STROBES = 5;



static std::vector<STR> AcquisitionStrobes =
{
  STR_LA_ENABLE,
  STR_CHA_DCCOUPLING,
  STR_CHB_DCCOUPLING,
  STR_ROLL,
  STR_LA_CHANNEL,
};


static std::vector<REG> AcquisitionRegisters =
{
  REG_TRIGGER_LEVEL,
  REG_TRIGGER_MODE,
  REG_TRIGGERHOLDOFF_B0,
  REG_TRIGGERHOLDOFF_B1,
  REG_TRIGGERHOLDOFF_B2,
  REG_TRIGGERHOLDOFF_B3,
  REG_CHA_YOFFSET_VOLTAGE,
  REG_CHB_YOFFSET_VOLTAGE,
  REG_DIVIDER_MULTIPLIER,
  REG_INPUT_DECIMATION,
  REG_TRIGGER_PW_MIN_B0,
  REG_TRIGGER_PW_MIN_B1,
  REG_TRIGGER_PW_MIN_B2,
  REG_TRIGGER_PW_MAX_B0,
  REG_TRIGGER_PW_MAX_B1,
  REG_TRIGGER_PW_MAX_B2,
  REG_TRIGGER_PWM,
  REG_DIGITAL_TRIGGER_RISING,
  REG_DIGITAL_TRIGGER_FALLING,
  REG_DIGITAL_TRIGGER_HIGH,
  REG_DIGITAL_TRIGGER_LOW,
  REG_ACQUISITION_DEPTH,
};


static std::vector<REG> ViewRegisters =
{
  REG_VIEW_DECIMATION,
  REG_VIEW_OFFSET_B0,
  REG_VIEW_OFFSET_B1,
  REG_VIEW_OFFSET_B2,
  REG_VIEW_ACQUISITIONS,
  REG_VIEW_BURSTS,
  REG_VIEW_EXCESS_B0,
  REG_VIEW_EXCESS_B1,
};

}

#endif // _LABNATION_SMARTSCOPE_REGS_H
